generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model patient {
  name_surname     String           @db.VarChar(50)
  phone_number     String           @db.VarChar(10)
  birthday         DateTime         @db.Date
  gender           String           @db.VarChar(10)
  appointment_date DateTime         @db.Timestamp(0)
  course_count     Int
  patient_id       Int              @id @default(autoincrement())
  first_visit_date DateTime?        @db.Timestamp(6)
  medicalrecords   medicalrecords[]
}

model staff {
  username           String             @unique @db.VarChar(50)
  staff_name         String             @db.VarChar(50)
  birthday           DateTime           @db.Date
  gender             String             @db.VarChar(10)
  staff_phone_number String             @db.VarChar(10)
  role               String             @db.VarChar(10)
  password           String             @db.VarChar(255)
  email              String             @db.VarChar(50)
  staff_id           Int                @id @default(autoincrement())
  financialrecords   financialrecords[]
  doctorID           medicalrecords[]   @relation("doctor_id")
  staffID            medicalrecords[]   @relation("staff_id")
  requisition        requisition[]
  stockinrecord      stockinrecord[]
}

model medicalrecords {
  record_id        Int           @id @default(autoincrement())
  symptoms         String        @db.VarChar(50)
  cost             Int           @default(0)
  appointment_date DateTime      @db.Timestamp(6)
  doctorid         Int
  patientid        Int
  staffid          Int
  treatment_id     Int
  doctor_id        staff         @relation("doctor_id", fields: [doctorid], references: [staff_id])
  patient_id       patient       @relation(fields: [patientid], references: [patient_id], onDelete: NoAction, onUpdate: NoAction)
  staff_id         staff         @relation("staff_id", fields: [staffid], references: [staff_id])
  treatmenttype    treatmenttype @relation(fields: [treatment_id], references: [treatment_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([doctorid])
  @@index([staffid])
}

model equipment {
  equipment_id   Int             @id @default(autoincrement())
  equipment_name String          @db.VarChar(20)
  price          Float
  amount         Int
  requisition    requisition[]
  stockinrecord  stockinrecord[]
}

model financialrecords {
  financial_record_id Int      @id @default(autoincrement())
  record_date         DateTime @db.Timestamp(6)
  income_and_expenses String   @db.VarChar(10)
  cost                Int
  staff_id            Int
  staff               staff    @relation(fields: [staff_id], references: [staff_id], onDelete: NoAction, onUpdate: NoAction)
}

model requisition {
  requisition_id   Int       @id @default(autoincrement())
  use_amount       Int
  requisition_date DateTime  @db.Timestamp(6)
  equipment_id     Int
  staff_id         Int
  equipment        equipment @relation(fields: [equipment_id], references: [equipment_id], onDelete: NoAction, onUpdate: NoAction)
  staff            staff     @relation(fields: [staff_id], references: [staff_id], onDelete: NoAction, onUpdate: NoAction)
}

model stockinrecord {
  stock_in_id   Int       @id @default(autoincrement())
  stock_in_date DateTime  @db.Timestamp(6)
  equipment_id  Int
  amount        Int
  staff_id      Int
  equipment     equipment @relation(fields: [equipment_id], references: [equipment_id], onDelete: NoAction, onUpdate: NoAction)
  staff         staff     @relation(fields: [staff_id], references: [staff_id], onDelete: NoAction, onUpdate: NoAction)
}

model treatmenttype {
  treatment_id   Int              @id @default(autoincrement())
  cost           Int
  treatment_name String           @db.VarChar(20)
  medicalrecords medicalrecords[]
}
